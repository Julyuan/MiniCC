
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'declarationListrightSINGLEEQUALleftBANGEQUALDOUBLEEQUALleftLANGLERANGLELANGLEEQUALRANGLEEQUALleftDOUBLEPIPESleftPLUSMINUSleftTIMESDIVIDEPERCENTrightUMINUSEXCLAMATIONleftELSEBANGEQUAL BREAK COMMA DIVIDE DOUBLEEQUAL DOUBLEPIPES ELSE EXCLAMATION ID IF INT LANGLE LANGLEEQUAL LCURLY LPAREN MINUS NUMBER PERCENT PLUS RANGLE RANGLEEQUAL RCURLY RETURN RPAREN SEMICOLON SINGLEEQUAL TIMES VOID WHILEfunctionDeclaration : typeSpec ID LPAREN parameters RPAREN compoundStatementcompoundStatement : LCURLY optionalLocalDeclarations optionalStatementList RCURLYoptionalStatementList : statementList\n                            | emptyempty :optionalLocalDeclarations : localDeclarations\n                                | emptyparameters : parameterList\n                  | VOIDprogram : declarationListstatementList : statementList statement\n                     | statementstatement : expressionStatement\n                 | compoundStatement\n                 | ifStatement\n                 | whileStatement\n                 | returnStatement\n                 | breakStatementexpressionStatement : expression SEMICOLON\n                           | SEMICOLONexpression : ID SINGLEEQUAL expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression DOUBLEPIPES expression\n                  | expression LANGLE expression\n                  | expression RANGLE expression\n                  | expression LANGLEEQUAL expression\n                  | expression RANGLEEQUAL expression\n                  | expression BANGEQUAL expression\n                  | expression DOUBLEEQUAL expression\n                  | expression PERCENT expression\n                  expression : NUMBERexpression : IDexpression : LPAREN expression RPARENexpression : MINUS expression %prec UMINUSexpression : EXCLAMATION expressiondeclarationList : declarationList declaration\n                       | declarationdeclaration : staticVariableDeclaration\n                  | functionDeclarationtypeSpec : VOID\n                | INTstaticVariableDeclaration : typeSpec ID SEMICOLONparameter : typeSpec IDparameterList : parameterList COMMA parameter\n                      | parameterwhileStatement : WHILE LPAREN expression RPAREN statementlocalDeclarations : localDeclarations localDeclaration\n                        | localDeclarationlocalDeclaration : typeSpec ID SEMICOLONoptionalElseStatement : ELSE statement\n                            | emptyifStatement : IF LPAREN expression RPAREN statement optionalElseStatementreturnStatement : RETURN expression SEMICOLONbreakStatement : BREAK SEMICOLON'
    
_lr_action_items = {'EXCLAMATION':([21,23,24,26,27,28,30,31,34,35,36,37,38,40,41,42,45,46,50,52,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,92,93,94,95,96,97,98,99,],[-5,28,-51,-7,-6,28,28,-14,28,-20,28,-12,-15,-16,28,-17,-13,-18,-50,-2,28,-11,28,28,-57,28,28,28,-19,28,28,28,28,28,28,28,28,28,-52,-56,28,28,-49,-5,28,-55,-54,-53,]),'RETURN':([21,23,24,26,27,31,35,36,37,38,40,42,45,46,50,52,56,60,64,74,75,92,93,94,95,96,97,98,99,],[-5,30,-51,-7,-6,-14,-20,30,-12,-15,-16,-17,-13,-18,-50,-2,-11,-57,-19,-52,-56,30,30,-49,-5,30,-55,-54,-53,]),'DOUBLEPIPES':([32,43,48,51,53,55,57,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,],[-34,-35,65,-38,65,-37,65,65,-36,65,65,65,65,-25,-26,-33,-24,-22,65,65,65,65,-23,]),'VOID':([0,1,4,5,7,8,10,11,18,20,21,24,27,50,52,74,],[3,-42,3,-40,-41,-39,-45,13,3,-1,3,-51,3,-50,-2,-52,]),'NUMBER':([21,23,24,26,27,28,30,31,34,35,36,37,38,40,41,42,45,46,50,52,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,92,93,94,95,96,97,98,99,],[-5,32,-51,-7,-6,32,32,-14,32,-20,32,-12,-15,-16,32,-17,-13,-18,-50,-2,32,-11,32,32,-57,32,32,32,-19,32,32,32,32,32,32,32,32,32,-52,-56,32,32,-49,-5,32,-55,-54,-53,]),'LCURLY':([17,21,23,24,26,27,31,35,36,37,38,40,42,45,46,50,52,56,60,64,74,75,92,93,94,95,96,97,98,99,],[21,-5,21,-51,-7,-6,-14,-20,21,-12,-15,-16,-17,-13,-18,-50,-2,-11,-57,-19,-52,-56,21,21,-49,-5,21,-55,-54,-53,]),'WHILE':([21,23,24,26,27,31,35,36,37,38,40,42,45,46,50,52,56,60,64,74,75,92,93,94,95,96,97,98,99,],[-5,33,-51,-7,-6,-14,-20,33,-12,-15,-16,-17,-13,-18,-50,-2,-11,-57,-19,-52,-56,33,33,-49,-5,33,-55,-54,-53,]),'RANGLEEQUAL':([32,43,48,51,53,55,57,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,],[-34,-35,69,-38,69,-37,69,69,-36,69,69,-27,69,-25,-26,-33,-24,-22,-30,-29,-28,69,-23,]),'BANGEQUAL':([32,43,48,51,53,55,57,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,],[-34,-35,72,-38,72,-37,72,72,-36,72,72,-27,-32,-25,-26,-33,-24,-22,-30,-29,-28,-31,-23,]),'MINUS':([21,23,24,26,27,28,30,31,32,34,35,36,37,38,40,41,42,43,45,46,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[-5,34,-51,-7,-6,34,34,-14,-34,34,-20,34,-12,-15,-16,34,-17,-35,-13,-18,73,-50,-38,-2,73,34,-37,-11,73,34,34,-57,34,34,34,-19,34,34,34,34,34,34,34,34,34,-52,-56,73,-36,73,73,73,73,-25,73,-33,-24,-22,73,73,73,73,-23,34,34,-49,-5,34,-55,-54,-53,]),'LANGLE':([32,43,48,51,53,55,57,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,],[-34,-35,61,-38,61,-37,61,61,-36,61,61,-27,61,-25,-26,-33,-24,-22,-30,-29,-28,61,-23,]),'RPAREN':([12,13,14,16,19,22,32,43,51,55,57,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,],[17,-9,-8,-48,-46,-47,-34,-35,-38,-37,77,92,-36,-21,93,-27,-32,-25,-26,-33,-24,-22,-30,-29,-28,-31,-23,]),'SEMICOLON':([9,21,23,24,26,27,31,32,35,36,37,38,40,42,43,45,46,47,48,49,50,51,52,53,55,56,60,64,74,75,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[10,-5,35,-51,-7,-6,-14,-34,-20,35,-12,-15,-16,-17,-35,-13,-18,60,64,74,-50,-38,-2,75,-37,-11,-57,-19,-52,-56,-36,-21,-27,-32,-25,-26,-33,-24,-22,-30,-29,-28,-31,-23,35,35,-49,-5,35,-55,-54,-53,]),'RCURLY':([21,23,24,26,27,29,31,35,36,37,38,39,40,42,45,46,50,52,56,60,64,74,75,94,95,97,98,99,],[-5,-5,-51,-7,-6,52,-14,-20,-3,-12,-15,-4,-16,-17,-13,-18,-50,-2,-11,-57,-19,-52,-56,-49,-5,-55,-54,-53,]),'COMMA':([14,16,19,22,],[18,-48,-46,-47,]),'PLUS':([32,43,48,51,53,55,57,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,],[-34,-35,68,-38,68,-37,68,68,-36,68,68,68,68,-25,68,-33,-24,-22,68,68,68,68,-23,]),'$end':([1,4,5,7,8,10,20,52,],[-42,0,-40,-41,-39,-45,-1,-2,]),'DIVIDE':([32,43,48,51,53,55,57,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,],[-34,-35,63,-38,63,-37,63,63,-36,63,63,63,63,-25,63,-33,-24,63,63,63,63,63,63,]),'DOUBLEEQUAL':([32,43,48,51,53,55,57,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,],[-34,-35,62,-38,62,-37,62,62,-36,62,62,-27,-32,-25,-26,-33,-24,-22,-30,-29,-28,-31,-23,]),'PERCENT':([32,43,48,51,53,55,57,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,],[-34,-35,66,-38,66,-37,66,66,-36,66,66,66,66,-25,66,-33,-24,66,66,66,66,66,66,]),'ELSE':([31,35,38,40,42,45,46,52,60,64,75,94,95,97,98,99,],[-14,-20,-15,-16,-17,-13,-18,-2,-57,-19,-56,-49,96,-55,-54,-53,]),'LPAREN':([9,21,23,24,26,27,28,30,31,33,34,35,36,37,38,40,41,42,44,45,46,50,52,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,92,93,94,95,96,97,98,99,],[11,-5,41,-51,-7,-6,41,41,-14,54,41,-20,41,-12,-15,-16,41,-17,59,-13,-18,-50,-2,41,-11,41,41,-57,41,41,41,-19,41,41,41,41,41,41,41,41,41,-52,-56,41,41,-49,-5,41,-55,-54,-53,]),'SINGLEEQUAL':([43,],[58,]),'RANGLE':([32,43,48,51,53,55,57,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,],[-34,-35,71,-38,71,-37,71,71,-36,71,71,-27,71,-25,-26,-33,-24,-22,-30,-29,-28,71,-23,]),'TIMES':([32,43,48,51,53,55,57,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,],[-34,-35,67,-38,67,-37,67,67,-36,67,67,67,67,-25,67,-33,-24,67,67,67,67,67,67,]),'LANGLEEQUAL':([32,43,48,51,53,55,57,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,],[-34,-35,70,-38,70,-37,70,70,-36,70,70,-27,70,-25,-26,-33,-24,-22,-30,-29,-28,70,-23,]),'ID':([2,3,6,13,15,21,23,24,25,26,27,28,30,31,34,35,36,37,38,40,41,42,45,46,50,52,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,92,93,94,95,96,97,98,99,],[-44,-43,9,-43,19,-5,43,-51,49,-7,-6,43,43,-14,43,-20,43,-12,-15,-16,43,-17,-13,-18,-50,-2,43,-11,43,43,-57,43,43,43,-19,43,43,43,43,43,43,43,43,43,-52,-56,43,43,-49,-5,43,-55,-54,-53,]),'IF':([21,23,24,26,27,31,35,36,37,38,40,42,45,46,50,52,56,60,64,74,75,92,93,94,95,96,97,98,99,],[-5,44,-51,-7,-6,-14,-20,44,-12,-15,-16,-17,-13,-18,-50,-2,-11,-57,-19,-52,-56,44,44,-49,-5,44,-55,-54,-53,]),'INT':([0,1,4,5,7,8,10,11,18,20,21,24,27,50,52,74,],[2,-42,2,-40,-41,-39,-45,2,2,-1,2,-51,2,-50,-2,-52,]),'BREAK':([21,23,24,26,27,31,35,36,37,38,40,42,45,46,50,52,56,60,64,74,75,92,93,94,95,96,97,98,99,],[-5,47,-51,-7,-6,-14,-20,47,-12,-15,-16,-17,-13,-18,-50,-2,-11,-57,-19,-52,-56,47,47,-49,-5,47,-55,-54,-53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'optionalStatementList':([23,],[29,]),'compoundStatement':([17,23,36,92,93,96,],[20,31,31,31,31,31,]),'breakStatement':([23,36,92,93,96,],[46,46,46,46,46,]),'staticVariableDeclaration':([0,4,],[7,7,]),'parameters':([11,],[12,]),'optionalLocalDeclarations':([21,],[23,]),'statementList':([23,],[36,]),'statement':([23,36,92,93,96,],[37,56,94,95,99,]),'optionalElseStatement':([95,],[97,]),'parameter':([11,18,],[16,22,]),'empty':([21,23,95,],[26,39,98,]),'localDeclarations':([21,],[27,]),'functionDeclaration':([0,4,],[1,1,]),'declarationList':([0,],[4,]),'whileStatement':([23,36,92,93,96,],[40,40,40,40,40,]),'localDeclaration':([21,27,],[24,50,]),'declaration':([0,4,],[5,8,]),'typeSpec':([0,4,11,18,21,27,],[6,6,15,15,25,25,]),'returnStatement':([23,36,92,93,96,],[42,42,42,42,42,]),'ifStatement':([23,36,92,93,96,],[38,38,38,38,38,]),'expressionStatement':([23,36,92,93,96,],[45,45,45,45,45,]),'parameterList':([11,],[14,]),'expression':([23,28,30,34,36,41,54,58,59,61,62,63,65,66,67,68,69,70,71,72,73,92,93,96,],[48,51,53,55,48,57,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,48,48,48,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declarationList","S'",1,None,None,None),
  ('functionDeclaration -> typeSpec ID LPAREN parameters RPAREN compoundStatement','functionDeclaration',6,'p_functionDeclaration','calcyacc.py',23),
  ('compoundStatement -> LCURLY optionalLocalDeclarations optionalStatementList RCURLY','compoundStatement',4,'p_compoundStatement','calcyacc.py',27),
  ('optionalStatementList -> statementList','optionalStatementList',1,'p_optionalStatementList','calcyacc.py',31),
  ('optionalStatementList -> empty','optionalStatementList',1,'p_optionalStatementList','calcyacc.py',32),
  ('empty -> <empty>','empty',0,'p_empty','calcyacc.py',36),
  ('optionalLocalDeclarations -> localDeclarations','optionalLocalDeclarations',1,'p_optionalLocalDeclarations','calcyacc.py',39),
  ('optionalLocalDeclarations -> empty','optionalLocalDeclarations',1,'p_optionalLocalDeclarations','calcyacc.py',40),
  ('parameters -> parameterList','parameters',1,'p_parameters','calcyacc.py',45),
  ('parameters -> VOID','parameters',1,'p_parameters','calcyacc.py',46),
  ('program -> declarationList','program',1,'p_program','calcyacc.py',52),
  ('statementList -> statementList statement','statementList',2,'p_statementList','calcyacc.py',56),
  ('statementList -> statement','statementList',1,'p_statementList','calcyacc.py',57),
  ('statement -> expressionStatement','statement',1,'p_statement','calcyacc.py',69),
  ('statement -> compoundStatement','statement',1,'p_statement','calcyacc.py',70),
  ('statement -> ifStatement','statement',1,'p_statement','calcyacc.py',71),
  ('statement -> whileStatement','statement',1,'p_statement','calcyacc.py',72),
  ('statement -> returnStatement','statement',1,'p_statement','calcyacc.py',73),
  ('statement -> breakStatement','statement',1,'p_statement','calcyacc.py',74),
  ('expressionStatement -> expression SEMICOLON','expressionStatement',2,'p_expressionStatement','calcyacc.py',78),
  ('expressionStatement -> SEMICOLON','expressionStatement',1,'p_expressionStatement','calcyacc.py',79),
  ('expression -> ID SINGLEEQUAL expression','expression',3,'p_expression_assign','calcyacc.py',83),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','calcyacc.py',87),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','calcyacc.py',88),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','calcyacc.py',89),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','calcyacc.py',90),
  ('expression -> expression DOUBLEPIPES expression','expression',3,'p_expression_binop','calcyacc.py',91),
  ('expression -> expression LANGLE expression','expression',3,'p_expression_binop','calcyacc.py',92),
  ('expression -> expression RANGLE expression','expression',3,'p_expression_binop','calcyacc.py',93),
  ('expression -> expression LANGLEEQUAL expression','expression',3,'p_expression_binop','calcyacc.py',94),
  ('expression -> expression RANGLEEQUAL expression','expression',3,'p_expression_binop','calcyacc.py',95),
  ('expression -> expression BANGEQUAL expression','expression',3,'p_expression_binop','calcyacc.py',96),
  ('expression -> expression DOUBLEEQUAL expression','expression',3,'p_expression_binop','calcyacc.py',97),
  ('expression -> expression PERCENT expression','expression',3,'p_expression_binop','calcyacc.py',98),
  ('expression -> NUMBER','expression',1,'p_expression_number','calcyacc.py',103),
  ('expression -> ID','expression',1,'p_expression_identifier','calcyacc.py',107),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calcyacc.py',111),
  ('expression -> MINUS expression','expression',2,'p_expr_uminus','calcyacc.py',115),
  ('expression -> EXCLAMATION expression','expression',2,'p_expr_exclamation','calcyacc.py',119),
  ('declarationList -> declarationList declaration','declarationList',2,'p_declarationList','calcyacc.py',124),
  ('declarationList -> declaration','declarationList',1,'p_declarationList','calcyacc.py',125),
  ('declaration -> staticVariableDeclaration','declaration',1,'p_declaration','calcyacc.py',139),
  ('declaration -> functionDeclaration','declaration',1,'p_declaration','calcyacc.py',140),
  ('typeSpec -> VOID','typeSpec',1,'p_typeSpec','calcyacc.py',144),
  ('typeSpec -> INT','typeSpec',1,'p_typeSpec','calcyacc.py',145),
  ('staticVariableDeclaration -> typeSpec ID SEMICOLON','staticVariableDeclaration',3,'p_staticVariableDeclaration','calcyacc.py',149),
  ('parameter -> typeSpec ID','parameter',2,'p_parameter','calcyacc.py',153),
  ('parameterList -> parameterList COMMA parameter','parameterList',3,'p_parameterList','calcyacc.py',157),
  ('parameterList -> parameter','parameterList',1,'p_parameterList','calcyacc.py',158),
  ('whileStatement -> WHILE LPAREN expression RPAREN statement','whileStatement',5,'p_whileStatement','calcyacc.py',170),
  ('localDeclarations -> localDeclarations localDeclaration','localDeclarations',2,'p_localDeclarations','calcyacc.py',175),
  ('localDeclarations -> localDeclaration','localDeclarations',1,'p_localDeclarations','calcyacc.py',176),
  ('localDeclaration -> typeSpec ID SEMICOLON','localDeclaration',3,'p_localDeclaration','calcyacc.py',188),
  ('optionalElseStatement -> ELSE statement','optionalElseStatement',2,'p_optionalElseStatement','calcyacc.py',193),
  ('optionalElseStatement -> empty','optionalElseStatement',1,'p_optionalElseStatement','calcyacc.py',194),
  ('ifStatement -> IF LPAREN expression RPAREN statement optionalElseStatement','ifStatement',6,'p_ifStatement','calcyacc.py',201),
  ('returnStatement -> RETURN expression SEMICOLON','returnStatement',3,'p_returnStatement','calcyacc.py',205),
  ('breakStatement -> BREAK SEMICOLON','breakStatement',2,'p_breakStatement','calcyacc.py',209),
]
