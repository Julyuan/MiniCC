
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightSINGLEEQUALleftDOUBLEPIPESleftDOUBLEAMPERSANDleftBANGEQUALDOUBLEEQUALleftLANGLERANGLELANGLEEQUALRANGLEEQUALleftPLUSMINUSleftTIMESDIVIDEPERCENTrightUMINUSEXCLAMATIONleftELSEBANGEQUAL BREAK COMMA DIVIDE DOUBLEAMPERSAND DOUBLEEQUAL DOUBLEPIPES ELSE EXCLAMATION FLOAT ID IF INT LANGLE LANGLEEQUAL LCURLY LPAREN MINUS NUMBER PERCENT PLUS RANGLE RANGLEEQUAL RCURLY RETURN RPAREN SEMICOLON SINGLEEQUAL TIMES VOID WHILEfunctionDeclaration : typeSpec ID LPAREN parameters RPAREN compoundStatementcompoundStatement : LCURLY optionalLocalDeclarations optionalStatementList RCURLYoptionalStatementList : statementList\n                            | emptyempty :optionalLocalDeclarations : localDeclarations\n                                | emptyparameters : parameterList\n                  | VOIDprogram : declarationListstatementList : statementList statement\n                     | statementstatement : expressionStatement\n                 | compoundStatement\n                 | ifStatement\n                 | whileStatement\n                 | returnStatement\n                 | breakStatementexpressionStatement : expression SEMICOLON\n                           | SEMICOLONexpression : ID SINGLEEQUAL expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression DOUBLEPIPES expression\n                  | expression DOUBLEAMPERSAND expression\n                  | expression LANGLE expression\n                  | expression RANGLE expression\n                  | expression LANGLEEQUAL expression\n                  | expression RANGLEEQUAL expression\n                  | expression BANGEQUAL expression\n                  | expression DOUBLEEQUAL expression\n                  | expression PERCENT expression\n                  expression : NUMBERexpression : IDexpression : LPAREN expression RPARENexpression : MINUS expression %prec UMINUSexpression : EXCLAMATION expressiondeclarationList : declarationList declaration\n                       | declarationdeclaration : staticVariableDeclaration\n                  | functionDeclarationtypeSpec : VOID\n                | INTstaticVariableDeclaration : typeSpec ID SEMICOLONparameter : typeSpec IDparameterList : parameterList COMMA parameter\n                      | parameterwhileStatement : WHILE LPAREN expression RPAREN statementlocalDeclarations : localDeclarations localDeclaration\n                        | localDeclarationlocalDeclaration : typeSpec ID SEMICOLONoptionalElseStatement : ELSE statement\n                            | emptyifStatement : IF LPAREN expression RPAREN statement optionalElseStatementreturnStatement : RETURN expression SEMICOLONbreakStatement : BREAK SEMICOLON'
    
_lr_action_items = {'EXCLAMATION':([22,24,25,27,28,29,31,32,35,36,37,38,39,41,42,43,46,47,51,53,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,95,96,97,98,99,100,101,102,],[-5,29,-52,-7,-6,29,29,-14,29,-20,29,-12,-15,-16,29,-17,-13,-18,-51,-2,29,-11,29,29,-58,29,29,29,-19,29,29,29,29,29,29,29,29,29,29,-53,-57,29,29,-50,-5,29,-56,-55,-54,]),'RETURN':([22,24,25,27,28,32,36,37,38,39,41,43,46,47,51,53,57,61,65,76,77,95,96,97,98,99,100,101,102,],[-5,31,-52,-7,-6,-14,-20,31,-12,-15,-16,-17,-13,-18,-51,-2,-11,-58,-19,-53,-57,31,31,-50,-5,31,-56,-55,-54,]),'DOUBLEPIPES':([33,44,49,52,54,56,58,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-35,-36,66,-39,66,-38,66,66,-37,66,66,-28,-33,-25,-26,-27,-34,-24,-22,-31,-30,-29,-32,-23,]),'VOID':([0,1,4,6,8,9,11,12,19,21,22,25,28,51,53,76,],[3,-43,3,-41,-42,-40,-46,14,3,-1,3,-52,3,-51,-2,-53,]),'NUMBER':([22,24,25,27,28,29,31,32,35,36,37,38,39,41,42,43,46,47,51,53,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,95,96,97,98,99,100,101,102,],[-5,33,-52,-7,-6,33,33,-14,33,-20,33,-12,-15,-16,33,-17,-13,-18,-51,-2,33,-11,33,33,-58,33,33,33,-19,33,33,33,33,33,33,33,33,33,33,-53,-57,33,33,-50,-5,33,-56,-55,-54,]),'LCURLY':([18,22,24,25,27,28,32,36,37,38,39,41,43,46,47,51,53,57,61,65,76,77,95,96,97,98,99,100,101,102,],[22,-5,22,-52,-7,-6,-14,-20,22,-12,-15,-16,-17,-13,-18,-51,-2,-11,-58,-19,-53,-57,22,22,-50,-5,22,-56,-55,-54,]),'WHILE':([22,24,25,27,28,32,36,37,38,39,41,43,46,47,51,53,57,61,65,76,77,95,96,97,98,99,100,101,102,],[-5,34,-52,-7,-6,-14,-20,34,-12,-15,-16,-17,-13,-18,-51,-2,-11,-58,-19,-53,-57,34,34,-50,-5,34,-56,-55,-54,]),'RANGLEEQUAL':([33,44,49,52,54,56,58,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-35,-36,71,-39,71,-38,71,71,-37,71,71,-28,71,-25,71,71,-34,-24,-22,-31,-30,-29,71,-23,]),'BANGEQUAL':([33,44,49,52,54,56,58,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-35,-36,74,-39,74,-38,74,74,-37,74,74,-28,-33,-25,74,74,-34,-24,-22,-31,-30,-29,-32,-23,]),'MINUS':([22,24,25,27,28,29,31,32,33,35,36,37,38,39,41,42,43,44,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,],[-5,35,-52,-7,-6,35,35,-14,-35,35,-20,35,-12,-15,-16,35,-17,-36,-13,-18,75,-51,-39,-2,75,35,-38,-11,75,35,35,-58,35,35,35,-19,35,35,35,35,35,35,35,35,35,35,-53,-57,75,-37,75,75,75,75,-25,75,75,-34,-24,-22,75,75,75,75,-23,35,35,-50,-5,35,-56,-55,-54,]),'LANGLE':([33,44,49,52,54,56,58,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-35,-36,62,-39,62,-38,62,62,-37,62,62,-28,62,-25,62,62,-34,-24,-22,-31,-30,-29,62,-23,]),'RPAREN':([13,14,15,17,20,23,33,44,52,56,58,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[18,-9,-8,-49,-47,-48,-35,-36,-39,-38,79,95,-37,-21,96,-28,-33,-25,-26,-27,-34,-24,-22,-31,-30,-29,-32,-23,]),'SEMICOLON':([10,22,24,25,27,28,32,33,36,37,38,39,41,43,44,46,47,48,49,50,51,52,53,54,56,57,61,65,76,77,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,],[11,-5,36,-52,-7,-6,-14,-35,-20,36,-12,-15,-16,-17,-36,-13,-18,61,65,76,-51,-39,-2,77,-38,-11,-58,-19,-53,-57,-37,-21,-28,-33,-25,-26,-27,-34,-24,-22,-31,-30,-29,-32,-23,36,36,-50,-5,36,-56,-55,-54,]),'RCURLY':([22,24,25,27,28,30,32,36,37,38,39,40,41,43,46,47,51,53,57,61,65,76,77,97,98,100,101,102,],[-5,-5,-52,-7,-6,53,-14,-20,-3,-12,-15,-4,-16,-17,-13,-18,-51,-2,-11,-58,-19,-53,-57,-50,-5,-56,-55,-54,]),'COMMA':([15,17,20,23,],[19,-49,-47,-48,]),'PLUS':([33,44,49,52,54,56,58,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-35,-36,70,-39,70,-38,70,70,-37,70,70,70,70,-25,70,70,-34,-24,-22,70,70,70,70,-23,]),'$end':([1,4,5,6,8,9,11,21,53,],[-43,-10,0,-41,-42,-40,-46,-1,-2,]),'DIVIDE':([33,44,49,52,54,56,58,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-35,-36,64,-39,64,-38,64,64,-37,64,64,64,64,-25,64,64,-34,-24,64,64,64,64,64,64,]),'DOUBLEEQUAL':([33,44,49,52,54,56,58,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-35,-36,63,-39,63,-38,63,63,-37,63,63,-28,-33,-25,63,63,-34,-24,-22,-31,-30,-29,-32,-23,]),'DOUBLEAMPERSAND':([33,44,49,52,54,56,58,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-35,-36,67,-39,67,-38,67,67,-37,67,67,-28,-33,-25,67,-27,-34,-24,-22,-31,-30,-29,-32,-23,]),'PERCENT':([33,44,49,52,54,56,58,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-35,-36,68,-39,68,-38,68,68,-37,68,68,68,68,-25,68,68,-34,-24,68,68,68,68,68,68,]),'ELSE':([32,36,39,41,43,46,47,53,61,65,77,97,98,100,101,102,],[-14,-20,-15,-16,-17,-13,-18,-2,-58,-19,-57,-50,99,-56,-55,-54,]),'LPAREN':([10,22,24,25,27,28,29,31,32,34,35,36,37,38,39,41,42,43,45,46,47,51,53,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,95,96,97,98,99,100,101,102,],[12,-5,42,-52,-7,-6,42,42,-14,55,42,-20,42,-12,-15,-16,42,-17,60,-13,-18,-51,-2,42,-11,42,42,-58,42,42,42,-19,42,42,42,42,42,42,42,42,42,42,-53,-57,42,42,-50,-5,42,-56,-55,-54,]),'SINGLEEQUAL':([44,],[59,]),'RANGLE':([33,44,49,52,54,56,58,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-35,-36,73,-39,73,-38,73,73,-37,73,73,-28,73,-25,73,73,-34,-24,-22,-31,-30,-29,73,-23,]),'TIMES':([33,44,49,52,54,56,58,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-35,-36,69,-39,69,-38,69,69,-37,69,69,69,69,-25,69,69,-34,-24,69,69,69,69,69,69,]),'LANGLEEQUAL':([33,44,49,52,54,56,58,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-35,-36,72,-39,72,-38,72,72,-37,72,72,-28,72,-25,72,72,-34,-24,-22,-31,-30,-29,72,-23,]),'ID':([2,3,7,14,16,22,24,25,26,27,28,29,31,32,35,36,37,38,39,41,42,43,46,47,51,53,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,95,96,97,98,99,100,101,102,],[-45,-44,10,-44,20,-5,44,-52,50,-7,-6,44,44,-14,44,-20,44,-12,-15,-16,44,-17,-13,-18,-51,-2,44,-11,44,44,-58,44,44,44,-19,44,44,44,44,44,44,44,44,44,44,-53,-57,44,44,-50,-5,44,-56,-55,-54,]),'IF':([22,24,25,27,28,32,36,37,38,39,41,43,46,47,51,53,57,61,65,76,77,95,96,97,98,99,100,101,102,],[-5,45,-52,-7,-6,-14,-20,45,-12,-15,-16,-17,-13,-18,-51,-2,-11,-58,-19,-53,-57,45,45,-50,-5,45,-56,-55,-54,]),'INT':([0,1,4,6,8,9,11,12,19,21,22,25,28,51,53,76,],[2,-43,2,-41,-42,-40,-46,2,2,-1,2,-52,2,-51,-2,-53,]),'BREAK':([22,24,25,27,28,32,36,37,38,39,41,43,46,47,51,53,57,61,65,76,77,95,96,97,98,99,100,101,102,],[-5,48,-52,-7,-6,-14,-20,48,-12,-15,-16,-17,-13,-18,-51,-2,-11,-58,-19,-53,-57,48,48,-50,-5,48,-56,-55,-54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'optionalStatementList':([24,],[30,]),'compoundStatement':([18,24,37,95,96,99,],[21,32,32,32,32,32,]),'breakStatement':([24,37,95,96,99,],[47,47,47,47,47,]),'staticVariableDeclaration':([0,4,],[8,8,]),'parameters':([12,],[13,]),'optionalLocalDeclarations':([22,],[24,]),'statementList':([24,],[37,]),'program':([0,],[5,]),'statement':([24,37,95,96,99,],[38,57,97,98,102,]),'optionalElseStatement':([98,],[100,]),'parameter':([12,19,],[17,23,]),'empty':([22,24,98,],[27,40,101,]),'localDeclarations':([22,],[28,]),'functionDeclaration':([0,4,],[1,1,]),'declarationList':([0,],[4,]),'whileStatement':([24,37,95,96,99,],[41,41,41,41,41,]),'localDeclaration':([22,28,],[25,51,]),'declaration':([0,4,],[6,9,]),'typeSpec':([0,4,12,19,22,28,],[7,7,16,16,26,26,]),'returnStatement':([24,37,95,96,99,],[43,43,43,43,43,]),'ifStatement':([24,37,95,96,99,],[39,39,39,39,39,]),'expressionStatement':([24,37,95,96,99,],[46,46,46,46,46,]),'parameterList':([12,],[15,]),'expression':([24,29,31,35,37,42,55,59,60,62,63,64,66,67,68,69,70,71,72,73,74,75,95,96,99,],[49,52,54,56,49,58,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,49,49,49,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('functionDeclaration -> typeSpec ID LPAREN parameters RPAREN compoundStatement','functionDeclaration',6,'p_functionDeclaration','calcyacc.py',24),
  ('compoundStatement -> LCURLY optionalLocalDeclarations optionalStatementList RCURLY','compoundStatement',4,'p_compoundStatement','calcyacc.py',28),
  ('optionalStatementList -> statementList','optionalStatementList',1,'p_optionalStatementList','calcyacc.py',32),
  ('optionalStatementList -> empty','optionalStatementList',1,'p_optionalStatementList','calcyacc.py',33),
  ('empty -> <empty>','empty',0,'p_empty','calcyacc.py',37),
  ('optionalLocalDeclarations -> localDeclarations','optionalLocalDeclarations',1,'p_optionalLocalDeclarations','calcyacc.py',40),
  ('optionalLocalDeclarations -> empty','optionalLocalDeclarations',1,'p_optionalLocalDeclarations','calcyacc.py',41),
  ('parameters -> parameterList','parameters',1,'p_parameters','calcyacc.py',46),
  ('parameters -> VOID','parameters',1,'p_parameters','calcyacc.py',47),
  ('program -> declarationList','program',1,'p_program','calcyacc.py',53),
  ('statementList -> statementList statement','statementList',2,'p_statementList','calcyacc.py',57),
  ('statementList -> statement','statementList',1,'p_statementList','calcyacc.py',58),
  ('statement -> expressionStatement','statement',1,'p_statement','calcyacc.py',70),
  ('statement -> compoundStatement','statement',1,'p_statement','calcyacc.py',71),
  ('statement -> ifStatement','statement',1,'p_statement','calcyacc.py',72),
  ('statement -> whileStatement','statement',1,'p_statement','calcyacc.py',73),
  ('statement -> returnStatement','statement',1,'p_statement','calcyacc.py',74),
  ('statement -> breakStatement','statement',1,'p_statement','calcyacc.py',75),
  ('expressionStatement -> expression SEMICOLON','expressionStatement',2,'p_expressionStatement','calcyacc.py',79),
  ('expressionStatement -> SEMICOLON','expressionStatement',1,'p_expressionStatement','calcyacc.py',80),
  ('expression -> ID SINGLEEQUAL expression','expression',3,'p_expression_assign','calcyacc.py',84),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','calcyacc.py',88),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','calcyacc.py',89),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','calcyacc.py',90),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','calcyacc.py',91),
  ('expression -> expression DOUBLEPIPES expression','expression',3,'p_expression_binop','calcyacc.py',92),
  ('expression -> expression DOUBLEAMPERSAND expression','expression',3,'p_expression_binop','calcyacc.py',93),
  ('expression -> expression LANGLE expression','expression',3,'p_expression_binop','calcyacc.py',94),
  ('expression -> expression RANGLE expression','expression',3,'p_expression_binop','calcyacc.py',95),
  ('expression -> expression LANGLEEQUAL expression','expression',3,'p_expression_binop','calcyacc.py',96),
  ('expression -> expression RANGLEEQUAL expression','expression',3,'p_expression_binop','calcyacc.py',97),
  ('expression -> expression BANGEQUAL expression','expression',3,'p_expression_binop','calcyacc.py',98),
  ('expression -> expression DOUBLEEQUAL expression','expression',3,'p_expression_binop','calcyacc.py',99),
  ('expression -> expression PERCENT expression','expression',3,'p_expression_binop','calcyacc.py',100),
  ('expression -> NUMBER','expression',1,'p_expression_number','calcyacc.py',105),
  ('expression -> ID','expression',1,'p_expression_identifier','calcyacc.py',109),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calcyacc.py',113),
  ('expression -> MINUS expression','expression',2,'p_expr_uminus','calcyacc.py',117),
  ('expression -> EXCLAMATION expression','expression',2,'p_expr_exclamation','calcyacc.py',121),
  ('declarationList -> declarationList declaration','declarationList',2,'p_declarationList','calcyacc.py',126),
  ('declarationList -> declaration','declarationList',1,'p_declarationList','calcyacc.py',127),
  ('declaration -> staticVariableDeclaration','declaration',1,'p_declaration','calcyacc.py',141),
  ('declaration -> functionDeclaration','declaration',1,'p_declaration','calcyacc.py',142),
  ('typeSpec -> VOID','typeSpec',1,'p_typeSpec','calcyacc.py',146),
  ('typeSpec -> INT','typeSpec',1,'p_typeSpec','calcyacc.py',147),
  ('staticVariableDeclaration -> typeSpec ID SEMICOLON','staticVariableDeclaration',3,'p_staticVariableDeclaration','calcyacc.py',151),
  ('parameter -> typeSpec ID','parameter',2,'p_parameter','calcyacc.py',155),
  ('parameterList -> parameterList COMMA parameter','parameterList',3,'p_parameterList','calcyacc.py',159),
  ('parameterList -> parameter','parameterList',1,'p_parameterList','calcyacc.py',160),
  ('whileStatement -> WHILE LPAREN expression RPAREN statement','whileStatement',5,'p_whileStatement','calcyacc.py',172),
  ('localDeclarations -> localDeclarations localDeclaration','localDeclarations',2,'p_localDeclarations','calcyacc.py',177),
  ('localDeclarations -> localDeclaration','localDeclarations',1,'p_localDeclarations','calcyacc.py',178),
  ('localDeclaration -> typeSpec ID SEMICOLON','localDeclaration',3,'p_localDeclaration','calcyacc.py',189),
  ('optionalElseStatement -> ELSE statement','optionalElseStatement',2,'p_optionalElseStatement','calcyacc.py',193),
  ('optionalElseStatement -> empty','optionalElseStatement',1,'p_optionalElseStatement','calcyacc.py',194),
  ('ifStatement -> IF LPAREN expression RPAREN statement optionalElseStatement','ifStatement',6,'p_ifStatement','calcyacc.py',201),
  ('returnStatement -> RETURN expression SEMICOLON','returnStatement',3,'p_returnStatement','calcyacc.py',205),
  ('breakStatement -> BREAK SEMICOLON','breakStatement',2,'p_breakStatement','calcyacc.py',209),
]
