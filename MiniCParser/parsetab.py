
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightSINGLEEQUALPLUSEQUALMINUSEQUALDIVIDEEQUALTIMESEQUALleftDOUBLEPIPESleftDOUBLEAMPERSANDleftBANGEQUALDOUBLEEQUALleftLANGLERANGLELANGLEEQUALRANGLEEQUALleftPLUSMINUSleftTIMESDIVIDEPERCENTleftLSQUARErightUMINUSEXCLAMATIONREMOVEREFADDRleftELSEADDR BANGEQUAL BREAK CHAR COMMA CONTINUE DIVIDE DIVIDEEQUAL DOT DOUBLEAMPERSAND DOUBLEEQUAL DOUBLEMINUS DOUBLEPIPES DOUBLEPLUS ELSE EXCLAMATION FLOAT FLOATLITERAL FOR GETCHAR ID IF INT INTLITERAL LANGLE LANGLEEQUAL LCURLY LEFTARROW LPAREN LSQUARE MINUS MINUSEQUAL PERCENT PLUS PLUSEQUAL PUTCHAR RANGLE RANGLEEQUAL RCURLY RETURN RPAREN RSQUARE SEMICOLON SINGLEEQUAL STRINGLITERAL STRUCT TIMES TIMESEQUAL VOID WHILEfunctionDeclaration : typeSpec ID LPAREN parameters RPAREN compoundStatementcompoundStatement : LCURLY optionalLocalDeclarations optionalStatementList RCURLYoptionalStatementList : statementList\n                            | emptyempty :optionalLocalDeclarations : localDeclarations\n                                | emptyparameters : parameterList\n                  | VOIDprogram : declarationListstatementList : statementList statement\n                     | statementstatement : expressionStatement\n                 | compoundStatement\n                 | ifStatement\n                 | whileStatement\n                 | forStatement\n                 | returnStatement\n                 | breakStatement\n                 | continueStatementexpression : GETCHAR LPAREN RPARENexpression : PUTCHAR LPAREN expression LPARENexpressionStatement : expression SEMICOLON\n                           | SEMICOLONexpression : expression DOT IDexpression : expression LEFTARROW IDexpression : ADDR expressionexpression : TIMES expression %prec REMOVEREFexpression : expression SINGLEEQUAL expressionexpression : expression LSQUARE expression RSQUAREexpression : STRINGLITERALexpression : ID LPAREN argumentExpressionList RPAREN\n                    | ID LPAREN RPARENargumentExpressionList : argumentExpressionList COMMA expression\n                     | expressionexpression : expression DIVIDEEQUAL expression\n                  | expression PLUSEQUAL expression\n                  | expression MINUSEQUAL expression\n                  | expression TIMESEQUAL expressionexpression : expression DOUBLEPLUS\n                  | expression DOUBLEMINUSexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression DOUBLEPIPES expression\n                  | expression DOUBLEAMPERSAND expression\n                  | expression LANGLE expression\n                  | expression RANGLE expression\n                  | expression LANGLEEQUAL expression\n                  | expression RANGLEEQUAL expression\n                  | expression BANGEQUAL expression\n                  | expression DOUBLEEQUAL expression\n                  | expression PERCENT expression\n                  expression : INTLITERALexpression : FLOATLITERALexpression : IDexpression : LPAREN expression RPARENexpression : MINUS expression %prec UMINUSexpression : EXCLAMATION expressiondeclarationList : declarationList declaration\n                       | declarationdeclaration : staticVariableDeclaration\n                  | functionDeclaration staticVariableDeclarationList : staticVariableDeclarationList staticVariableDeclaration\n                                    | staticVariableDeclarationforStatement : FOR LPAREN optionalExpression SEMICOLON optionalExpression SEMICOLON optionalExpression RPAREN statementoptionalExpression : expression\n                            | emptycontinueStatement : CONTINUE SEMICOLONtypeSpec : VOID\n                | INT\n                | FLOAT\n                | CHAR\n                | structSpecifierstructSpecifier : STRUCT ID LCURLY staticVariableDeclarationList RCURLY\n                        | STRUCT IDstaticVariableDeclaration : typeSpec declaratorList SEMICOLON\n                                | typeSpec declarator LSQUARE INTLITERAL RSQUARE SEMICOLONdeclaratorList : declaratorList COMMA declarator\n                | declaratordeclarator : pointer ID\n                 | IDpointer : TIMES\n                | TIMES pointer\n    parameter : typeSpec IDparameterList : parameterList COMMA parameter\n                      | parameterwhileStatement : WHILE LPAREN expression RPAREN statementlocalDeclarations : localDeclarations localDeclaration\n                        | localDeclarationlocalDeclaration : staticVariableDeclarationoptionalElseStatement : ELSE statement\n                            | emptyifStatement : IF LPAREN expression RPAREN statement optionalElseStatementreturnStatement : RETURN expression SEMICOLONbreakStatement : BREAK SEMICOLON'
    
_lr_action_items = {'EXCLAMATION':([21,44,46,48,49,50,51,52,53,54,56,57,58,61,62,63,64,65,69,70,71,72,76,77,78,84,86,88,90,91,92,95,96,98,99,100,102,103,104,105,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,125,158,160,162,163,165,168,169,170,171,172,174,175,176,],[-78,-79,-5,-92,54,-7,-6,-91,-17,54,54,-20,-14,54,-24,54,-12,-15,-16,54,54,-18,54,-13,-19,-90,-2,54,-11,54,54,54,54,-97,-70,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-23,54,54,-96,54,54,54,54,-89,-5,54,54,-95,-94,-93,54,-67,]),'INTLITERAL':([21,23,44,46,48,49,50,51,52,53,54,56,57,58,61,62,63,64,65,69,70,71,72,76,77,78,84,86,88,90,91,92,95,96,98,99,100,102,103,104,105,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,125,158,160,162,163,165,168,169,170,171,172,174,175,176,],[-78,29,-79,-5,-92,75,-7,-6,-91,-17,75,75,-20,-14,75,-24,75,-12,-15,-16,75,75,-18,75,-13,-19,-90,-2,75,-11,75,75,75,75,-97,-70,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-23,75,75,-96,75,75,75,75,-89,-5,75,75,-95,-94,-93,75,-67,]),'RETURN':([21,44,46,48,49,50,51,52,53,57,58,62,63,64,65,69,72,77,78,84,86,90,98,99,121,125,158,163,165,168,170,171,172,174,175,176,],[-78,-79,-5,-92,56,-7,-6,-91,-17,-20,-14,-24,56,-12,-15,-16,-18,-13,-19,-90,-2,-11,-97,-70,-23,-96,56,56,-89,-5,56,-95,-94,-93,56,-67,]),'LPAREN':([18,21,44,46,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,83,84,85,86,88,89,90,91,92,93,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,113,114,115,116,117,118,119,120,121,122,123,125,127,131,132,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,153,154,155,156,157,158,159,160,161,162,163,164,165,168,169,170,171,172,174,175,176,],[25,-78,-79,-5,-92,71,-7,-6,-91,-17,71,71,-20,-14,-31,88,71,-24,71,-12,-15,91,92,-16,71,71,-18,95,96,-55,71,-13,-19,-56,124,-90,-60,-2,71,-59,-11,71,71,-28,71,71,-27,-97,-70,71,-40,71,71,71,71,71,-41,71,71,71,71,71,71,71,71,71,71,71,-23,71,71,-96,159,-58,-33,-46,-51,-36,-52,-43,-25,-48,-42,-45,-53,-26,-47,-54,-44,-37,-29,-49,-50,-38,-39,-21,71,-22,71,-32,71,71,-30,-89,-5,71,71,-95,-94,-93,71,-67,]),'DOUBLEPIPES':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,100,-60,100,-59,-28,100,-27,-40,-41,100,100,100,-58,-33,100,100,-46,-51,100,-52,-43,-25,-48,-42,-45,-53,-26,-47,-54,-44,100,100,100,-49,-50,100,100,-21,-22,-32,-30,100,]),'VOID':([0,3,6,7,8,13,21,25,26,35,37,40,43,44,45,46,48,51,52,84,86,],[1,-63,1,-64,-62,-61,-78,31,1,1,-66,1,-65,-79,-1,1,-92,1,-91,-90,-2,]),'DOUBLEMINUS':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,108,-60,108,-59,-28,108,-27,-40,-41,108,108,108,-58,-33,108,108,-46,-51,-36,-52,-43,-25,-48,-42,-45,-53,-26,-47,-54,-44,-37,108,-29,-49,-50,-38,-39,-21,-22,-32,-30,108,]),'STRINGLITERAL':([21,44,46,48,49,50,51,52,53,54,56,57,58,61,62,63,64,65,69,70,71,72,76,77,78,84,86,88,90,91,92,95,96,98,99,100,102,103,104,105,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,125,158,160,162,163,165,168,169,170,171,172,174,175,176,],[-78,-79,-5,-92,59,-7,-6,-91,-17,59,59,-20,-14,59,-24,59,-12,-15,-16,59,59,-18,59,-13,-19,-90,-2,59,-11,59,59,59,59,-97,-70,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-23,59,59,-96,59,59,59,59,-89,-5,59,59,-95,-94,-93,59,-67,]),'CHAR':([0,3,6,7,8,13,21,25,26,35,37,40,43,44,45,46,48,51,52,84,86,],[2,-63,2,-64,-62,-61,-78,2,2,2,-66,2,-65,-79,-1,2,-92,2,-91,-90,-2,]),'LCURLY':([19,21,39,44,46,48,49,50,51,52,53,57,58,62,63,64,65,69,72,77,78,84,86,90,98,99,121,125,158,163,165,168,170,171,172,174,175,176,],[26,-78,46,-79,-5,-92,46,-7,-6,-91,-17,-20,-14,-24,46,-12,-15,-16,-18,-13,-19,-90,-2,-11,-97,-70,-23,-96,46,46,-89,-5,46,-95,-94,-93,46,-67,]),'WHILE':([21,44,46,48,49,50,51,52,53,57,58,62,63,64,65,69,72,77,78,84,86,90,98,99,121,125,158,163,165,168,170,171,172,174,175,176,],[-78,-79,-5,-92,60,-7,-6,-91,-17,-20,-14,-24,60,-12,-15,-16,-18,-13,-19,-90,-2,-11,-97,-70,-23,-96,60,60,-89,-5,60,-95,-94,-93,60,-67,]),'DOUBLEPLUS':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,101,-60,101,-59,-28,101,-27,-40,-41,101,101,101,-58,-33,101,101,-46,-51,-36,-52,-43,-25,-48,-42,-45,-53,-26,-47,-54,-44,-37,101,-29,-49,-50,-38,-39,-21,-22,-32,-30,101,]),'RANGLEEQUAL':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,102,-60,102,-59,-28,102,-27,-40,-41,102,102,102,-58,-33,102,102,102,-51,102,102,-43,-25,-48,-42,-45,102,-26,102,-54,-44,102,102,102,-49,-50,102,102,-21,-22,-32,-30,102,]),'DIVIDEEQUAL':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,103,-60,103,-59,-28,103,-27,-40,-41,103,103,103,-58,-33,103,103,-46,-51,103,-52,-43,-25,-48,-42,-45,-53,-26,-47,-54,-44,103,103,103,-49,-50,103,103,-21,-22,-32,-30,103,]),'BANGEQUAL':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,104,-60,104,-59,-28,104,-27,-40,-41,104,104,104,-58,-33,104,104,104,-51,104,-52,-43,-25,-48,-42,-45,-53,-26,104,-54,-44,104,104,104,-49,-50,104,104,-21,-22,-32,-30,104,]),'MINUS':([21,44,46,48,49,50,51,52,53,54,56,57,58,59,61,62,63,64,65,69,70,71,72,73,75,76,77,78,79,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,113,114,115,116,117,118,119,120,121,122,123,125,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,167,168,169,170,171,172,174,175,176,],[-78,-79,-5,-92,61,-7,-6,-91,-17,61,61,-20,-14,-31,61,-24,61,-12,-15,-16,61,61,-18,-57,-55,61,-13,-19,-56,105,-90,-60,-2,105,61,-59,-11,61,61,-28,105,61,61,-27,-97,-70,61,-40,61,61,61,61,61,-41,61,61,61,61,61,61,61,61,61,61,61,-23,61,61,-96,105,105,105,-58,-33,105,105,105,105,105,105,-43,-25,105,-42,-45,105,-26,105,-54,-44,105,105,105,105,105,105,105,-21,61,-22,61,-32,61,61,-30,-89,105,-5,61,61,-95,-94,-93,61,-67,]),'DOT':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,106,-60,106,-59,-28,106,-27,-40,-41,106,106,106,-58,-33,106,106,-46,-51,-36,-52,-43,-25,-48,-42,-45,-53,-26,-47,-54,-44,-37,106,-29,-49,-50,-38,-39,-21,-22,-32,-30,106,]),'RSQUARE':([29,59,73,75,79,85,89,93,97,101,108,131,132,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,],[38,-31,-57,-55,-56,-60,-59,-28,-27,-40,-41,-58,-33,-46,-51,-36,-52,-43,-25,-48,-42,-45,-53,-26,-47,-54,-44,-37,164,-29,-49,-50,-38,-39,-21,-22,-32,-30,]),'LANGLE':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,107,-60,107,-59,-28,107,-27,-40,-41,107,107,107,-58,-33,107,107,107,-51,107,107,-43,-25,-48,-42,-45,107,-26,107,-54,-44,107,107,107,-49,-50,107,107,-21,-22,-32,-30,107,]),'RPAREN':([30,31,32,34,41,47,59,73,75,79,85,89,93,94,95,97,101,108,124,126,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,153,154,155,156,157,159,161,164,167,169,173,],[39,-9,-8,-88,-86,-87,-31,-57,-55,-56,-60,-59,-28,131,132,-27,-40,-41,157,158,-69,-68,-58,-33,-35,161,163,-46,-51,-36,-52,-43,-25,-48,-42,-45,-53,-26,-47,-54,-44,-37,-29,-49,-50,-38,-39,-21,-22,-32,-30,-34,-5,175,]),'DOUBLEEQUAL':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,111,-60,111,-59,-28,111,-27,-40,-41,111,111,111,-58,-33,111,111,111,-51,111,-52,-43,-25,-48,-42,-45,-53,-26,111,-54,-44,111,111,111,-49,-50,111,111,-21,-22,-32,-30,111,]),'SEMICOLON':([14,16,18,21,24,27,28,38,44,46,48,49,50,51,52,53,57,58,59,62,63,64,65,69,72,73,75,77,78,79,80,81,82,84,85,86,87,89,90,92,93,97,98,99,101,108,121,125,128,129,130,131,132,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,153,154,155,156,157,158,159,160,161,163,164,165,166,168,170,171,172,174,175,176,],[21,-81,-83,-78,-82,-80,-83,44,-79,-5,-92,62,-7,-6,-91,-17,-20,-14,-31,-24,62,-12,-15,-16,-18,-57,-55,-13,-19,-56,98,99,121,-90,-60,-2,125,-59,-11,-5,-28,-27,-97,-70,-40,-41,-23,-96,160,-69,-68,-58,-33,-46,-51,-36,-52,-43,-25,-48,-42,-45,-53,-26,-47,-54,-44,-37,-29,-49,-50,-38,-39,-21,62,-22,-5,-32,62,-30,-89,169,-5,62,-95,-94,-93,62,-67,]),'RCURLY':([21,35,37,43,44,46,48,49,50,51,52,53,55,57,58,62,63,64,65,66,69,72,77,78,84,86,90,98,99,121,125,165,168,171,172,174,176,],[-78,42,-66,-65,-79,-5,-92,-5,-7,-6,-91,-17,86,-20,-14,-24,-3,-12,-15,-4,-16,-18,-13,-19,-90,-2,-11,-97,-70,-23,-96,-89,-5,-95,-94,-93,-67,]),'COMMA':([14,16,18,24,27,28,32,34,41,47,59,73,75,79,85,89,93,97,101,108,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,153,154,155,156,157,159,161,164,167,],[20,-81,-83,-82,-80,-83,40,-88,-86,-87,-31,-57,-55,-56,-60,-59,-28,-27,-40,-41,-58,-33,-35,162,-46,-51,-36,-52,-43,-25,-48,-42,-45,-53,-26,-47,-54,-44,-37,-29,-49,-50,-38,-39,-21,-22,-32,-30,-34,]),'ADDR':([21,44,46,48,49,50,51,52,53,54,56,57,58,61,62,63,64,65,69,70,71,72,76,77,78,84,86,88,90,91,92,95,96,98,99,100,102,103,104,105,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,125,158,160,162,163,165,168,169,170,171,172,174,175,176,],[-78,-79,-5,-92,76,-7,-6,-91,-17,76,76,-20,-14,76,-24,76,-12,-15,-16,76,76,-18,76,-13,-19,-90,-2,76,-11,76,76,76,76,-97,-70,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-23,76,76,-96,76,76,76,76,-89,-5,76,76,-95,-94,-93,76,-67,]),'PLUS':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,109,-60,109,-59,-28,109,-27,-40,-41,109,109,109,-58,-33,109,109,109,109,109,109,-43,-25,109,-42,-45,109,-26,109,-54,-44,109,109,109,109,109,109,109,-21,-22,-32,-30,109,]),'$end':([3,4,6,7,8,13,21,44,45,86,],[-63,0,-10,-64,-62,-61,-78,-79,-1,-2,]),'PUTCHAR':([21,44,46,48,49,50,51,52,53,54,56,57,58,61,62,63,64,65,69,70,71,72,76,77,78,84,86,88,90,91,92,95,96,98,99,100,102,103,104,105,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,125,158,160,162,163,165,168,169,170,171,172,174,175,176,],[-78,-79,-5,-92,67,-7,-6,-91,-17,67,67,-20,-14,67,-24,67,-12,-15,-16,67,67,-18,67,-13,-19,-90,-2,67,-11,67,67,67,67,-97,-70,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-23,67,67,-96,67,67,67,67,-89,-5,67,67,-95,-94,-93,67,-67,]),'DIVIDE':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,110,-60,110,-59,-28,110,-27,-40,-41,110,110,110,-58,-33,110,110,110,110,110,110,110,-25,110,110,-45,110,-26,110,-54,-44,110,110,110,110,110,110,110,-21,-22,-32,-30,110,]),'FOR':([21,44,46,48,49,50,51,52,53,57,58,62,63,64,65,69,72,77,78,84,86,90,98,99,121,125,158,163,165,168,170,171,172,174,175,176,],[-78,-79,-5,-92,68,-7,-6,-91,-17,-20,-14,-24,68,-12,-15,-16,-18,-13,-19,-90,-2,-11,-97,-70,-23,-96,68,68,-89,-5,68,-95,-94,-93,68,-67,]),'LEFTARROW':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,112,-60,112,-59,-28,112,-27,-40,-41,112,112,112,-58,-33,112,112,-46,-51,-36,-52,-43,-25,-48,-42,-45,-53,-26,-47,-54,-44,-37,112,-29,-49,-50,-38,-39,-21,-22,-32,-30,112,]),'DOUBLEAMPERSAND':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,113,-60,113,-59,-28,113,-27,-40,-41,113,113,113,-58,-33,113,113,113,-51,113,-52,-43,-25,-48,-42,-45,-53,-26,-47,-54,-44,113,113,113,-49,-50,113,113,-21,-22,-32,-30,113,]),'PERCENT':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,114,-60,114,-59,-28,114,-27,-40,-41,114,114,114,-58,-33,114,114,114,114,114,114,114,-25,114,114,-45,114,-26,114,-54,-44,114,114,114,114,114,114,114,-21,-22,-32,-30,114,]),'TIMES':([1,2,5,9,11,12,15,19,20,21,36,42,44,46,48,49,50,51,52,53,54,56,57,58,59,61,62,63,64,65,69,70,71,72,73,75,76,77,78,79,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,113,114,115,116,117,118,119,120,121,122,123,125,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,167,168,169,170,171,172,174,175,176,],[-71,-74,-75,15,-72,-73,15,-77,15,-78,15,-76,-79,-5,-92,70,-7,-6,-91,-17,70,70,-20,-14,-31,70,-24,70,-12,-15,-16,70,70,-18,-57,-55,70,-13,-19,-56,115,-90,-60,-2,115,70,-59,-11,70,70,-28,115,70,70,-27,-97,-70,70,-40,70,70,70,70,70,-41,70,70,70,70,70,70,70,70,70,70,70,-23,70,70,-96,115,115,115,-58,-33,115,115,115,115,115,115,115,-25,115,115,-45,115,-26,115,-54,-44,115,115,115,115,115,115,115,-21,70,-22,70,-32,70,70,-30,-89,115,-5,70,70,-95,-94,-93,70,-67,]),'PLUSEQUAL':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,116,-60,116,-59,-28,116,-27,-40,-41,116,116,116,-58,-33,116,116,-46,-51,116,-52,-43,-25,-48,-42,-45,-53,-26,-47,-54,-44,116,116,116,-49,-50,116,116,-21,-22,-32,-30,116,]),'LSQUARE':([16,18,24,28,59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[23,-83,-82,-83,-31,-57,-55,-56,117,-60,117,-59,-28,117,-27,-40,-41,117,117,117,-58,-33,117,117,117,117,117,117,117,-25,117,117,117,117,-26,117,117,117,117,117,117,117,117,117,117,-21,-22,-32,-30,117,]),'SINGLEEQUAL':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,118,-60,118,-59,-28,118,-27,-40,-41,118,118,118,-58,-33,118,118,-46,-51,118,-52,-43,-25,-48,-42,-45,-53,-26,-47,-54,-44,118,118,118,-49,-50,118,118,-21,-22,-32,-30,118,]),'RANGLE':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,119,-60,119,-59,-28,119,-27,-40,-41,119,119,119,-58,-33,119,119,119,-51,119,119,-43,-25,-48,-42,-45,119,-26,119,-54,-44,119,119,119,-49,-50,119,119,-21,-22,-32,-30,119,]),'ELSE':([53,57,58,62,65,69,72,77,78,86,98,99,121,125,165,168,171,172,174,176,],[-17,-20,-14,-24,-15,-16,-18,-13,-19,-2,-97,-70,-23,-96,-89,170,-95,-94,-93,-67,]),'LANGLEEQUAL':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,120,-60,120,-59,-28,120,-27,-40,-41,120,120,120,-58,-33,120,120,120,-51,120,120,-43,-25,-48,-42,-45,120,-26,120,-54,-44,120,120,120,-49,-50,120,120,-21,-22,-32,-30,120,]),'ID':([1,2,5,9,10,11,12,15,17,19,20,21,22,31,33,36,42,44,46,48,49,50,51,52,53,54,56,57,58,61,62,63,64,65,69,70,71,72,76,77,78,84,86,88,90,91,92,95,96,98,99,100,102,103,104,105,106,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,158,160,162,163,165,168,169,170,171,172,174,175,176,],[-71,-74,-75,18,19,-72,-73,-84,24,-77,28,-78,-85,-71,41,28,-76,-79,-5,-92,73,-7,-6,-91,-17,73,73,-20,-14,73,-24,73,-12,-15,-16,73,73,-18,73,-13,-19,-90,-2,73,-11,73,73,73,73,-97,-70,73,73,73,73,73,141,73,73,73,73,146,73,73,73,73,73,73,73,73,-23,73,73,-96,73,73,73,73,-89,-5,73,73,-95,-94,-93,73,-67,]),'IF':([21,44,46,48,49,50,51,52,53,57,58,62,63,64,65,69,72,77,78,84,86,90,98,99,121,125,158,163,165,168,170,171,172,174,175,176,],[-78,-79,-5,-92,74,-7,-6,-91,-17,-20,-14,-24,74,-12,-15,-16,-18,-13,-19,-90,-2,-11,-97,-70,-23,-96,74,74,-89,-5,74,-95,-94,-93,74,-67,]),'STRUCT':([0,3,6,7,8,13,21,25,26,35,37,40,43,44,45,46,48,51,52,84,86,],[10,-63,10,-64,-62,-61,-78,10,10,10,-66,10,-65,-79,-1,10,-92,10,-91,-90,-2,]),'INT':([0,3,6,7,8,13,21,25,26,35,37,40,43,44,45,46,48,51,52,84,86,],[11,-63,11,-64,-62,-61,-78,11,11,11,-66,11,-65,-79,-1,11,-92,11,-91,-90,-2,]),'MINUSEQUAL':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,122,-60,122,-59,-28,122,-27,-40,-41,122,122,122,-58,-33,122,122,-46,-51,122,-52,-43,-25,-48,-42,-45,-53,-26,-47,-54,-44,122,122,122,-49,-50,122,122,-21,-22,-32,-30,122,]),'FLOAT':([0,3,6,7,8,13,21,25,26,35,37,40,43,44,45,46,48,51,52,84,86,],[12,-63,12,-64,-62,-61,-78,12,12,12,-66,12,-65,-79,-1,12,-92,12,-91,-90,-2,]),'FLOATLITERAL':([21,44,46,48,49,50,51,52,53,54,56,57,58,61,62,63,64,65,69,70,71,72,76,77,78,84,86,88,90,91,92,95,96,98,99,100,102,103,104,105,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,125,158,160,162,163,165,168,169,170,171,172,174,175,176,],[-78,-79,-5,-92,79,-7,-6,-91,-17,79,79,-20,-14,79,-24,79,-12,-15,-16,79,79,-18,79,-13,-19,-90,-2,79,-11,79,79,79,79,-97,-70,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-23,79,79,-96,79,79,79,79,-89,-5,79,79,-95,-94,-93,79,-67,]),'BREAK':([21,44,46,48,49,50,51,52,53,57,58,62,63,64,65,69,72,77,78,84,86,90,98,99,121,125,158,163,165,168,170,171,172,174,175,176,],[-78,-79,-5,-92,80,-7,-6,-91,-17,-20,-14,-24,80,-12,-15,-16,-18,-13,-19,-90,-2,-11,-97,-70,-23,-96,80,80,-89,-5,80,-95,-94,-93,80,-67,]),'CONTINUE':([21,44,46,48,49,50,51,52,53,57,58,62,63,64,65,69,72,77,78,84,86,90,98,99,121,125,158,163,165,168,170,171,172,174,175,176,],[-78,-79,-5,-92,81,-7,-6,-91,-17,-20,-14,-24,81,-12,-15,-16,-18,-13,-19,-90,-2,-11,-97,-70,-23,-96,81,81,-89,-5,81,-95,-94,-93,81,-67,]),'TIMESEQUAL':([59,73,75,79,82,85,87,89,93,94,97,101,108,126,127,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,167,],[-31,-57,-55,-56,123,-60,123,-59,-28,123,-27,-40,-41,123,123,123,-58,-33,123,123,-46,-51,123,-52,-43,-25,-48,-42,-45,-53,-26,-47,-54,-44,123,123,123,-49,-50,123,123,-21,-22,-32,-30,123,]),'GETCHAR':([21,44,46,48,49,50,51,52,53,54,56,57,58,61,62,63,64,65,69,70,71,72,76,77,78,84,86,88,90,91,92,95,96,98,99,100,102,103,104,105,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,125,158,160,162,163,165,168,169,170,171,172,174,175,176,],[-78,-79,-5,-92,83,-7,-6,-91,-17,83,83,-20,-14,83,-24,83,-12,-15,-16,83,83,-18,83,-13,-19,-90,-2,83,-11,83,83,83,83,-97,-70,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-23,83,83,-96,83,83,83,83,-89,-5,83,83,-95,-94,-93,83,-67,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'forStatement':([49,63,158,163,170,175,],[53,53,53,53,53,53,]),'optionalStatementList':([49,],[55,]),'continueStatement':([49,63,158,163,170,175,],[57,57,57,57,57,57,]),'optionalExpression':([92,160,169,],[128,166,173,]),'compoundStatement':([39,49,63,158,163,170,175,],[45,58,58,58,58,58,58,]),'breakStatement':([49,63,158,163,170,175,],[78,78,78,78,78,78,]),'pointer':([9,15,20,36,],[17,22,17,17,]),'returnStatement':([49,63,158,163,170,175,],[72,72,72,72,72,72,]),'staticVariableDeclaration':([0,6,26,35,46,51,],[3,3,37,43,48,48,]),'parameters':([25,],[30,]),'optionalLocalDeclarations':([46,],[49,]),'statementList':([49,],[63,]),'program':([0,],[4,]),'structSpecifier':([0,6,25,26,35,40,46,51,],[5,5,5,5,5,5,5,5,]),'optionalElseStatement':([168,],[171,]),'parameter':([25,40,],[34,47,]),'empty':([46,49,92,160,168,169,],[50,66,129,129,172,129,]),'localDeclarations':([46,],[51,]),'declarationList':([0,],[6,]),'statement':([49,63,158,163,170,175,],[64,90,165,168,174,176,]),'functionDeclaration':([0,6,],[7,7,]),'declaratorList':([9,36,],[14,14,]),'whileStatement':([49,63,158,163,170,175,],[69,69,69,69,69,69,]),'localDeclaration':([46,51,],[52,84,]),'declaration':([0,6,],[8,13,]),'typeSpec':([0,6,25,26,35,40,46,51,],[9,9,33,36,36,33,36,36,]),'staticVariableDeclarationList':([26,],[35,]),'ifStatement':([49,63,158,163,170,175,],[65,65,65,65,65,65,]),'expressionStatement':([49,63,158,163,170,175,],[77,77,77,77,77,77,]),'parameterList':([25,],[32,]),'declarator':([9,20,36,],[16,27,16,]),'argumentExpressionList':([95,],[134,]),'expression':([49,54,56,61,63,70,71,76,88,91,92,95,96,100,102,103,104,105,107,109,110,111,113,114,115,116,117,118,119,120,122,123,158,160,162,163,169,170,175,],[82,85,87,89,82,93,94,97,126,127,130,133,135,136,137,138,139,140,142,143,144,145,147,148,149,150,151,152,153,154,155,156,82,130,167,82,130,82,82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('functionDeclaration -> typeSpec ID LPAREN parameters RPAREN compoundStatement','functionDeclaration',6,'p_functionDeclaration','calcyacc.py',25),
  ('compoundStatement -> LCURLY optionalLocalDeclarations optionalStatementList RCURLY','compoundStatement',4,'p_compoundStatement','calcyacc.py',29),
  ('optionalStatementList -> statementList','optionalStatementList',1,'p_optionalStatementList','calcyacc.py',33),
  ('optionalStatementList -> empty','optionalStatementList',1,'p_optionalStatementList','calcyacc.py',34),
  ('empty -> <empty>','empty',0,'p_empty','calcyacc.py',38),
  ('optionalLocalDeclarations -> localDeclarations','optionalLocalDeclarations',1,'p_optionalLocalDeclarations','calcyacc.py',41),
  ('optionalLocalDeclarations -> empty','optionalLocalDeclarations',1,'p_optionalLocalDeclarations','calcyacc.py',42),
  ('parameters -> parameterList','parameters',1,'p_parameters','calcyacc.py',47),
  ('parameters -> VOID','parameters',1,'p_parameters','calcyacc.py',48),
  ('program -> declarationList','program',1,'p_program','calcyacc.py',54),
  ('statementList -> statementList statement','statementList',2,'p_statementList','calcyacc.py',58),
  ('statementList -> statement','statementList',1,'p_statementList','calcyacc.py',59),
  ('statement -> expressionStatement','statement',1,'p_statement','calcyacc.py',71),
  ('statement -> compoundStatement','statement',1,'p_statement','calcyacc.py',72),
  ('statement -> ifStatement','statement',1,'p_statement','calcyacc.py',73),
  ('statement -> whileStatement','statement',1,'p_statement','calcyacc.py',74),
  ('statement -> forStatement','statement',1,'p_statement','calcyacc.py',75),
  ('statement -> returnStatement','statement',1,'p_statement','calcyacc.py',76),
  ('statement -> breakStatement','statement',1,'p_statement','calcyacc.py',77),
  ('statement -> continueStatement','statement',1,'p_statement','calcyacc.py',78),
  ('expression -> GETCHAR LPAREN RPAREN','expression',3,'p_expression_getchar','calcyacc.py',82),
  ('expression -> PUTCHAR LPAREN expression LPAREN','expression',4,'p_expression_putchar','calcyacc.py',86),
  ('expressionStatement -> expression SEMICOLON','expressionStatement',2,'p_expressionStatement','calcyacc.py',90),
  ('expressionStatement -> SEMICOLON','expressionStatement',1,'p_expressionStatement','calcyacc.py',91),
  ('expression -> expression DOT ID','expression',3,'p_expression_dot','calcyacc.py',95),
  ('expression -> expression LEFTARROW ID','expression',3,'p_expression_arrow','calcyacc.py',99),
  ('expression -> ADDR expression','expression',2,'p_expression_getaddr','calcyacc.py',103),
  ('expression -> TIMES expression','expression',2,'p_expression_removeref','calcyacc.py',107),
  ('expression -> expression SINGLEEQUAL expression','expression',3,'p_expression_assign','calcyacc.py',112),
  ('expression -> expression LSQUARE expression RSQUARE','expression',4,'p_expression_array','calcyacc.py',116),
  ('expression -> STRINGLITERAL','expression',1,'p_expression_string','calcyacc.py',120),
  ('expression -> ID LPAREN argumentExpressionList RPAREN','expression',4,'p_expression_functioncall','calcyacc.py',124),
  ('expression -> ID LPAREN RPAREN','expression',3,'p_expression_functioncall','calcyacc.py',125),
  ('argumentExpressionList -> argumentExpressionList COMMA expression','argumentExpressionList',3,'p_expression_argument_list','calcyacc.py',133),
  ('argumentExpressionList -> expression','argumentExpressionList',1,'p_expression_argument_list','calcyacc.py',134),
  ('expression -> expression DIVIDEEQUAL expression','expression',3,'p_expression_composite','calcyacc.py',145),
  ('expression -> expression PLUSEQUAL expression','expression',3,'p_expression_composite','calcyacc.py',146),
  ('expression -> expression MINUSEQUAL expression','expression',3,'p_expression_composite','calcyacc.py',147),
  ('expression -> expression TIMESEQUAL expression','expression',3,'p_expression_composite','calcyacc.py',148),
  ('expression -> expression DOUBLEPLUS','expression',2,'p_expression_selfoperator','calcyacc.py',152),
  ('expression -> expression DOUBLEMINUS','expression',2,'p_expression_selfoperator','calcyacc.py',153),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','calcyacc.py',158),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','calcyacc.py',159),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','calcyacc.py',160),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','calcyacc.py',161),
  ('expression -> expression DOUBLEPIPES expression','expression',3,'p_expression_binop','calcyacc.py',162),
  ('expression -> expression DOUBLEAMPERSAND expression','expression',3,'p_expression_binop','calcyacc.py',163),
  ('expression -> expression LANGLE expression','expression',3,'p_expression_binop','calcyacc.py',164),
  ('expression -> expression RANGLE expression','expression',3,'p_expression_binop','calcyacc.py',165),
  ('expression -> expression LANGLEEQUAL expression','expression',3,'p_expression_binop','calcyacc.py',166),
  ('expression -> expression RANGLEEQUAL expression','expression',3,'p_expression_binop','calcyacc.py',167),
  ('expression -> expression BANGEQUAL expression','expression',3,'p_expression_binop','calcyacc.py',168),
  ('expression -> expression DOUBLEEQUAL expression','expression',3,'p_expression_binop','calcyacc.py',169),
  ('expression -> expression PERCENT expression','expression',3,'p_expression_binop','calcyacc.py',170),
  ('expression -> INTLITERAL','expression',1,'p_expression_intliteral','calcyacc.py',175),
  ('expression -> FLOATLITERAL','expression',1,'p_expression_floatliteral','calcyacc.py',179),
  ('expression -> ID','expression',1,'p_expression_identifier','calcyacc.py',183),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calcyacc.py',187),
  ('expression -> MINUS expression','expression',2,'p_expr_uminus','calcyacc.py',191),
  ('expression -> EXCLAMATION expression','expression',2,'p_expr_exclamation','calcyacc.py',200),
  ('declarationList -> declarationList declaration','declarationList',2,'p_declarationList','calcyacc.py',205),
  ('declarationList -> declaration','declarationList',1,'p_declarationList','calcyacc.py',206),
  ('declaration -> staticVariableDeclaration','declaration',1,'p_declaration','calcyacc.py',221),
  ('declaration -> functionDeclaration','declaration',1,'p_declaration','calcyacc.py',222),
  ('staticVariableDeclarationList -> staticVariableDeclarationList staticVariableDeclaration','staticVariableDeclarationList',2,'p_staticVariableDeclarationList','calcyacc.py',227),
  ('staticVariableDeclarationList -> staticVariableDeclaration','staticVariableDeclarationList',1,'p_staticVariableDeclarationList','calcyacc.py',228),
  ('forStatement -> FOR LPAREN optionalExpression SEMICOLON optionalExpression SEMICOLON optionalExpression RPAREN statement','forStatement',9,'p_forStatement','calcyacc.py',239),
  ('optionalExpression -> expression','optionalExpression',1,'p_optionalExpression','calcyacc.py',243),
  ('optionalExpression -> empty','optionalExpression',1,'p_optionalExpression','calcyacc.py',244),
  ('continueStatement -> CONTINUE SEMICOLON','continueStatement',2,'p_continueStatement','calcyacc.py',248),
  ('typeSpec -> VOID','typeSpec',1,'p_typeSpec','calcyacc.py',252),
  ('typeSpec -> INT','typeSpec',1,'p_typeSpec','calcyacc.py',253),
  ('typeSpec -> FLOAT','typeSpec',1,'p_typeSpec','calcyacc.py',254),
  ('typeSpec -> CHAR','typeSpec',1,'p_typeSpec','calcyacc.py',255),
  ('typeSpec -> structSpecifier','typeSpec',1,'p_typeSpec','calcyacc.py',256),
  ('structSpecifier -> STRUCT ID LCURLY staticVariableDeclarationList RCURLY','structSpecifier',5,'p_structSpecifier','calcyacc.py',260),
  ('structSpecifier -> STRUCT ID','structSpecifier',2,'p_structSpecifier','calcyacc.py',261),
  ('staticVariableDeclaration -> typeSpec declaratorList SEMICOLON','staticVariableDeclaration',3,'p_staticVariableDeclaration','calcyacc.py',268),
  ('staticVariableDeclaration -> typeSpec declarator LSQUARE INTLITERAL RSQUARE SEMICOLON','staticVariableDeclaration',6,'p_staticVariableDeclaration','calcyacc.py',269),
  ('declaratorList -> declaratorList COMMA declarator','declaratorList',3,'p_declaratorList','calcyacc.py',276),
  ('declaratorList -> declarator','declaratorList',1,'p_declaratorList','calcyacc.py',277),
  ('declarator -> pointer ID','declarator',2,'p_declarator','calcyacc.py',288),
  ('declarator -> ID','declarator',1,'p_declarator','calcyacc.py',289),
  ('pointer -> TIMES','pointer',1,'p_pointer','calcyacc.py',296),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer','calcyacc.py',297),
  ('parameter -> typeSpec ID','parameter',2,'p_parameter','calcyacc.py',309),
  ('parameterList -> parameterList COMMA parameter','parameterList',3,'p_parameterList','calcyacc.py',313),
  ('parameterList -> parameter','parameterList',1,'p_parameterList','calcyacc.py',314),
  ('whileStatement -> WHILE LPAREN expression RPAREN statement','whileStatement',5,'p_whileStatement','calcyacc.py',326),
  ('localDeclarations -> localDeclarations localDeclaration','localDeclarations',2,'p_localDeclarations','calcyacc.py',331),
  ('localDeclarations -> localDeclaration','localDeclarations',1,'p_localDeclarations','calcyacc.py',332),
  ('localDeclaration -> staticVariableDeclaration','localDeclaration',1,'p_localDeclaration','calcyacc.py',343),
  ('optionalElseStatement -> ELSE statement','optionalElseStatement',2,'p_optionalElseStatement','calcyacc.py',347),
  ('optionalElseStatement -> empty','optionalElseStatement',1,'p_optionalElseStatement','calcyacc.py',348),
  ('ifStatement -> IF LPAREN expression RPAREN statement optionalElseStatement','ifStatement',6,'p_ifStatement','calcyacc.py',355),
  ('returnStatement -> RETURN expression SEMICOLON','returnStatement',3,'p_returnStatement','calcyacc.py',359),
  ('breakStatement -> BREAK SEMICOLON','breakStatement',2,'p_breakStatement','calcyacc.py',363),
]
